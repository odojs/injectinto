// Generated by CoffeeScript 1.10.0
var bind,
  bind1 = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

bind = function() {
  var Inject;
  Inject = (function() {
    function Inject() {
      this.clearAll = bind1(this.clearAll, this);
      this.clear = bind1(this.clear, this);
      this.many = bind1(this.many, this);
      this.firstornone = bind1(this.firstornone, this);
      this.first = bind1(this.first, this);
      this.oneornone = bind1(this.oneornone, this);
      this.one = bind1(this.one, this);
      this.bind = bind1(this.bind, this);
      this.bindings = {};
    }

    Inject.prototype.bind = function(key, item) {
      var i, k;
      if (typeof key === 'object') {
        for (k in key) {
          i = key[k];
          this.bind(k, i);
        }
        return;
      }
      if (this.bindings[key] == null) {
        this.bindings[key] = [];
      }
      if (Array.isArray(item)) {
        return this.bindings[key] = this.bindings[key].concat(item);
      } else {
        return this.bindings[key].push(item);
      }
    };

    Inject.prototype.one = function(key) {
      var items;
      if (this.bindings[key] == null) {
        throw key + " not found";
      }
      items = this.bindings[key];
      if (items.length > 1) {
        throw key + " too many bound";
      }
      return items[0];
    };

    Inject.prototype.oneornone = function(key) {
      var items;
      if (this.bindings[key] == null) {
        return null;
      }
      items = this.bindings[key];
      if (items.length > 1) {
        throw key + " too many bound";
      }
      return items[0];
    };

    Inject.prototype.first = function(key) {
      if (this.bindings[key] == null) {
        throw key + " not found";
      }
      return this.bindings[key][0];
    };

    Inject.prototype.firstornone = function(key) {
      if (this.bindings[key] == null) {
        return null;
      }
      return this.bindings[key][0];
    };

    Inject.prototype.many = function(key) {
      if (this.bindings[key] == null) {
        return [];
      }
      return this.bindings[key];
    };

    Inject.prototype.clear = function(key) {
      return delete this.bindings[key];
    };

    Inject.prototype.clearAll = function() {
      return this.bindings = {};
    };

    return Inject;

  })();
  return new Inject;
};

if (typeof define !== "undefined" && define !== null) {
  define([], bind);
} else if (typeof module !== "undefined" && module !== null) {
  module.exports = bind();
} else {
  window.inject = bind();
}
